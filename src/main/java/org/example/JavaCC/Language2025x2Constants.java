/* Generated By:JavaCC: Do not edit this line. Language2025x2Constants.java */
package org.example.JavaCC;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Language2025x2Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 1;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 2;
  /** RegularExpression Id. */
  int BEGIN = 7;
  /** RegularExpression Id. */
  int DEFINE = 8;
  /** RegularExpression Id. */
  int START = 9;
  /** RegularExpression Id. */
  int END = 10;
  /** RegularExpression Id. */
  int SET = 11;
  /** RegularExpression Id. */
  int TYPE_NUM = 12;
  /** RegularExpression Id. */
  int TYPE_REAL = 13;
  /** RegularExpression Id. */
  int TYPE_TEXT = 14;
  /** RegularExpression Id. */
  int TYPE_FLAG = 15;
  /** RegularExpression Id. */
  int READ = 16;
  /** RegularExpression Id. */
  int SHOW = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int THEN = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int TRUE = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int LOOP = 23;
  /** RegularExpression Id. */
  int WHILE = 24;
  /** RegularExpression Id. */
  int TEXT = 25;
  /** RegularExpression Id. */
  int REAL = 26;
  /** RegularExpression Id. */
  int NUM = 27;
  /** RegularExpression Id. */
  int EQUAL = 28;
  /** RegularExpression Id. */
  int NOT_EQUAL = 29;
  /** RegularExpression Id. */
  int SEMICOLON = 30;
  /** RegularExpression Id. */
  int ASSIGN = 31;
  /** RegularExpression Id. */
  int COLON = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int LBRACE = 35;
  /** RegularExpression Id. */
  int RBRACE = 36;
  /** RegularExpression Id. */
  int LBRACKET = 37;
  /** RegularExpression Id. */
  int RBRACKET = 38;
  /** RegularExpression Id. */
  int LPAREN = 39;
  /** RegularExpression Id. */
  int RPAREN = 40;
  /** RegularExpression Id. */
  int PLUS = 41;
  /** RegularExpression Id. */
  int MINUS = 42;
  /** RegularExpression Id. */
  int SHIFT_RIGHT_ASSIGN = 43;
  /** RegularExpression Id. */
  int STAR = 44;
  /** RegularExpression Id. */
  int SLASH = 45;
  /** RegularExpression Id. */
  int PERCENT = 46;
  /** RegularExpression Id. */
  int POWER = 47;
  /** RegularExpression Id. */
  int DOUBLE_PERCENT = 48;
  /** RegularExpression Id. */
  int SHIFT_LEFT = 49;
  /** RegularExpression Id. */
  int SHIFT_RIGHT = 50;
  /** RegularExpression Id. */
  int SHIFT_LEFT_ASSIGN = 51;
  /** RegularExpression Id. */
  int EXCLAMATION = 52;
  /** RegularExpression Id. */
  int PIPE = 53;
  /** RegularExpression Id. */
  int AMPERSAND = 54;
  /** RegularExpression Id. */
  int IDENTIFIER = 55;
  /** RegularExpression Id. */
  int ERROR_NUMBER_TOO_MANY_DIGITS = 56;
  /** RegularExpression Id. */
  int ERROR_IDENTIFIER_START_WITH_NUM = 57;
  /** RegularExpression Id. */
  int ERROR_IDENTIFIER_WITH_MANY_NUMS = 58;
  /** RegularExpression Id. */
  int ERROR_IDENTIFIER_ENDS_WITH_NUM = 59;
  /** RegularExpression Id. */
  int ERROR_UNTERMINATED_STRING = 60;
  /** RegularExpression Id. */
  int ERROR_UNTERMINATED_COMMENT = 61;
  /** RegularExpression Id. */
  int ERROR_REAL_TOO_MANY_DIGITS1 = 62;
  /** RegularExpression Id. */
  int ERROR_REAL_TOO_MANY_DIGITS2 = 63;
  /** RegularExpression Id. */
  int ERROR_REAL_TOO_MANY_DIGITS3 = 64;
  /** RegularExpression Id. */
  int ERROR_INVALID_REAL = 65;
  /** RegularExpression Id. */
  int ERROR_INVALID_SYMBOL = 66;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SINGLE_LINE_COMMENT>",
    "<BLOCK_COMMENT>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"begin\"",
    "\"define\"",
    "\"start\"",
    "\"end\"",
    "\"set\"",
    "\"num\"",
    "\"real\"",
    "\"text\"",
    "\"flag\"",
    "\"read\"",
    "\"show\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"true\"",
    "\"false\"",
    "\"loop\"",
    "\"while\"",
    "<TEXT>",
    "<REAL>",
    "<NUM>",
    "\"==\"",
    "\"!=\"",
    "\";\"",
    "\"=\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\">>=\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"**\"",
    "\"%%\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\"!\"",
    "\"|\"",
    "\"&\"",
    "<IDENTIFIER>",
    "<ERROR_NUMBER_TOO_MANY_DIGITS>",
    "<ERROR_IDENTIFIER_START_WITH_NUM>",
    "<ERROR_IDENTIFIER_WITH_MANY_NUMS>",
    "<ERROR_IDENTIFIER_ENDS_WITH_NUM>",
    "<ERROR_UNTERMINATED_STRING>",
    "<ERROR_UNTERMINATED_COMMENT>",
    "<ERROR_REAL_TOO_MANY_DIGITS1>",
    "<ERROR_REAL_TOO_MANY_DIGITS2>",
    "<ERROR_REAL_TOO_MANY_DIGITS3>",
    "<ERROR_INVALID_REAL>",
    "<ERROR_INVALID_SYMBOL>",
  };

}
