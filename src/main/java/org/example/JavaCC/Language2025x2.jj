options {
    IGNORE_CASE = true;
    STATIC = false;
    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Language2025x2)
package org.example.JavaCC;
public class Language2025x2 {
    public StringBuilder errosSintaticos = new StringBuilder();

    private String criaListaEsperados(int[][] sequenciaEsperada) {
        StringBuilder tokensEsperados = new StringBuilder();
        for (int[] sequencia : sequenciaEsperada) {
            for (int token : sequencia) {
                tokensEsperados.append(tokenImage[token]).append(" ");
            }
        }
        return tokensEsperados.toString().trim();
    }

    void reportaErro(ParseException e) {
        System.err.println("ERRO SINT√ÅTICO: " + e.getMessage());
        Token t = e.currentToken.next; // O token que causou o erro
        errosSintaticos.append("Erro na linha ")
                      .append(t.beginLine)
                      .append(", coluna ")
                      .append(t.beginColumn)
                      .append(". Encontrado '")
                      .append(t.image)
                      .append("'.\n");

        errosSintaticos.append("Encontrou: ")
                        .append(t.image)
                        .append(" Esperava: ")
                        .append(criaListaEsperados(e.expectedTokenSequences))
                        .append("\n");

    }


}

PARSER_END(Language2025x2)

SPECIAL_TOKEN :{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"] )*>
    | < BLOCK_COMMENT : "/*" ( ~["*"] | "*" ~["/"] )* "*/" >
}

SKIP: {
      " "
    | "\n"
    | "\r"
    | "\t"
}

TOKEN : {
    <BEGIN: "begin">
    | <DEFINE: "define">
    | <START: "start">
    | <END: "end">
    | <SET: "set">
    | <TYPE_NUM: "num">
    | <TYPE_REAL: "real">
    | <TYPE_TEXT: "text">
    | <TYPE_FLAG: "flag">
    | <READ: "read">
    | <SHOW: "show">
    | <IF: "if">
    | <THEN: "then">
    | <ELSE: "else">
    | <TRUE: "true">
    | <FALSE: "false">
    | <LOOP: "loop">
    | <WHILE: "while">

    | <TEXT : ( "\"" ( "\\" ~[] | ~["\"", "\\", "\n", "\r"] )* "\"" ) | ( "\'" ( "\\" ~[] | ~["\'", "\\", "\n", "\r"] )* "\'" )>
    | <REAL: ( ["0"-"9"] ) ( ["0"-"9"] )? ( ["0"-"9"] )? ( ["0"-"9"] )? "." (( ["0"-"9"] ) | ( ["0"-"9"] ) ( ["0"-"9"] ) )>
    | <NUM: ( ["0"-"9"] ) ( ["0"-"9"] )? ( ["0"-"9"] )?>

    | <EQUAL: "==">
    | <NOT_EQUAL: "!=">
    | <SEMICOLON: ";">
    | <ASSIGN: "=">
    | <COLON: ":">
    | <COMMA: ",">
    | <DOT: ".">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <LBRACKET: "[">
    | <RBRACKET: "]">
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <PLUS: "+">
    | <MINUS: "-">
    | <SHIFT_RIGHT_ASSIGN: ">>=">
    | <STAR: "*">
    | <SLASH: "/">
    | <PERCENT: "%">
    | <POWER: "**">
    | <DOUBLE_PERCENT: "%%">
    | <SHIFT_LEFT: "<<">
    | <SHIFT_RIGHT: ">>">
    | <SHIFT_LEFT_ASSIGN: "<<=">
    | <EXCLAMATION: "!">
    | <PIPE: "|">
    | <AMPERSAND: "&">

    | <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] ( ( ["0"-"9"] )? ["a"-"z", "A"-"Z", "_"] )* >

    | <ERROR_NUMBER_TOO_MANY_DIGITS: ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+>
    | <ERROR_IDENTIFIER_START_WITH_NUM: ["0"-"9"]( ["a"-"z", "A"-"Z", "0"-"9", "_"] )* >
    | <ERROR_IDENTIFIER_WITH_MANY_NUMS: ( ["a"-"z", "A"-"Z", "0"-"9", "_"] )*  ( ["0"-"9"] )+ (["a"-"z", "A"-"Z", "_"] )+ >
    | <ERROR_IDENTIFIER_ENDS_WITH_NUM: ( ["a"-"z", "A"-"Z", "0"-"9", "_"] )* ( ["0"-"9"] ) >
    | <ERROR_UNTERMINATED_STRING: (( "\"" ( "\\" ~[] | ~["\"", "\\", "\n", "\r"] )* ) | ( "\'" ( "\\" ~[] | ~["\'", "\\", "\n", "\r"] )* )) >
    | <ERROR_UNTERMINATED_COMMENT: "/*" (~["*"] | "*" ~["/"])* >

    | <ERROR_REAL_TOO_MANY_DIGITS1:( ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+ "." ( ["0"-"9"] ) ( ["0"-"9"] )?)>
    | <ERROR_REAL_TOO_MANY_DIGITS2:( ["0"-"9"] ) ( ["0"-"9"] )? ( ["0"-"9"] )? ( ["0"-"9"] )? "."  ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+>
    | <ERROR_REAL_TOO_MANY_DIGITS3:( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+ "." ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+ >
    | <ERROR_INVALID_REAL:( ( ["0"-"9"] ( ["a"-"z", "A"-"Z", "_"] )* )+ "." ( ["a"-"z", "A"-"Z", "0"-"9", "_", "."] )*)>

    | <ERROR_INVALID_SYMBOL: ~[]>
}

void programa():{}
{
        try{
            <BEGIN> [ <IDENTIFIER> ]
            [ declaracao() ]
            <START>
            listaDeComandos()
            <END> <DOT>
        }
        catch(ParseException e){
            reportaErro(e);
            
        }
}

// DECLARACAO DE VARIAVEIS
void declaracao():{}
{
    try{
        <DEFINE> listaDeclaracao()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void listaDeclaracao():{}
{
    try{
        (variosIdentificadores() <COLON> tipos() variosTipos() <SEMICOLON>)+
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void variosIdentificadores():{}
{
    try{
        <IDENTIFIER> listaIdentificadores()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void listaIdentificadores():{}
{
      (<COMMA> <IDENTIFIER>)*
}

void tipos():{}
{
    <TYPE_NUM> | <TYPE_REAL> | <TYPE_TEXT> | <TYPE_FLAG>
}

void constants():{}
{
    <NUM> | <REAL> | <TEXT> | <TRUE> | <FALSE>
}

void constantsDeclare():{}
{
    try{
        constants() constantsList()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void constantsList():{}
{
    try{
        [ <COMMA> constantsDeclare() ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void variosTipos():{}
{
    try{
        [ <ASSIGN> constants() | <LBRACKET> <NUM> <RBRACKET> vectorDeclare() ]
    }catch(ParseException e){
        reportaErro(e);
        
    }

}

void vectorDeclare():{}
{
    try{
        [ <ASSIGN> <LBRACE> constantsDeclare() <RBRACE> ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}
//Comandos

void listaDeComandos() :{}
{
    try{
        comando()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void comando():{}
{
    try{
      ( atribuicao() | entrada() | saida() | selecao() | repeticao() ) [ listaDeComandos() ]

    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void atribuicao():{}{
    try{
        <SET> <IDENTIFIER> vetor() <ASSIGN> expressao() <SEMICOLON>
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void entrada():{}
{
    try{
        <READ> <LPAREN> <IDENTIFIER> vetor() <RPAREN> <SEMICOLON>
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void saida():{}
{
    try{
        <SHOW> <LPAREN> idOuConst() <RPAREN> <SEMICOLON>
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void idOuConst():{}
{
    try{
        <IDENTIFIER> vetor() listaIdOuConst() | constants() listaIdOuConst()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void listaIdOuConst():{}
{
    try{
        [ <COMMA> ( <IDENTIFIER>vetor() listaIdOuConst() | constants() listaIdOuConst() ) ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void vetor():{}
{
    try{
       [ <LBRACKET> expressao()<RBRACKET> ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void expressao(): {}{
    try{
            expAritOuLogi() expressao1()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void expressao1(): {}
{
    try{
           [ ( <EQUAL> | <NOT_EQUAL> | <SHIFT_LEFT> | <SHIFT_RIGHT> | <SHIFT_LEFT_ASSIGN> | <SHIFT_RIGHT_ASSIGN> ) expAritOuLogi() ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void expAritOuLogi(): {}
{
    try{
            termo2() menorPrioridade()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void menorPrioridade(): {}
{
    try{
        [ ( <PLUS> | <MINUS> | <PIPE> ) termo2() menorPrioridade() ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void termo2(): {}
{
    try{
        termo1() mediaPrioridade()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void mediaPrioridade(): {}
{
    try{
        [ ( <STAR> | <SLASH> | <PERCENT> | <DOUBLE_PERCENT> | <AMPERSAND> ) termo1() mediaPrioridade() ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void termo1(): {}
{
    try{
        elemento() maiorPrioridade()
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void maiorPrioridade(): {}{
    try{
        [ <POWER> elemento() maiorPrioridade() ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void elemento(): {}
{
    try{
        (<IDENTIFIER> | constants() | [ <EXCLAMATION> ] <LPAREN> expressao() <RPAREN> )
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void repeticao(): {}
{
    try{
        <LOOP> <WHILE> expressao()
        listaDeComandos()
        <END> <SEMICOLON>
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void selecao(): {}
{
    try{
        <IF> expressao() <THEN>
        listaDeComandos()
        ifelse()
        <END> <SEMICOLON>
    }catch(ParseException e){
        reportaErro(e);
        
    }
}

void ifelse(): {} {
    try{
        [ <ELSE> listaDeComandos() ]
    }catch(ParseException e){
        reportaErro(e);
        
    }
}