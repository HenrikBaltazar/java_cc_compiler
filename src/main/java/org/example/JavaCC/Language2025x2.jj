options {
    IGNORE_CASE = true;
    STATIC = false;
    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Language2025x2)
package org.example.JavaCC;
public class Language2025x2 {
    public StringBuilder errosSintaticos = new StringBuilder();

    public String criaListaEsperados(int[][] sequenciaEsperada) {
        StringBuilder tokensEsperados = new StringBuilder();
        for (int[] sequencia : sequenciaEsperada) {
            for (int token : sequencia) {
                tokensEsperados.append(tokenImage[token]).append(" ");
            }
        }
        return tokensEsperados.toString().trim();
    }

    public static String run(java.io.Reader lexico){
        Language2025x2 parser = new Language2025x2(lexico);

        try{
            parser.program();
        }
        catch (ParseException e){
            return "erro: "+e.getMessage();
        }
        return "ok";
    }


}

PARSER_END(Language2025x2)

SPECIAL_TOKEN :{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"] )*>
    | < BLOCK_COMMENT : "/*" ( ~["*"] | "*" ~["/"] )* "*/" >
}

SKIP: {
      " "
    | "\n"
    | "\r"
    | "\t"
}

TOKEN : {
    <BEGIN: "begin">
    | <DEFINE: "define">
    | <START: "start">
    | <END: "end">
    | <SET: "set">
    | <TYPE_NUM: "num">
    | <TYPE_REAL: "real">
    | <TYPE_TEXT: "text">
    | <TYPE_FLAG: "flag">
    | <READ: "read">
    | <SHOW: "show">
    | <IF: "if">
    | <THEN: "then">
    | <ELSE: "else">
    | <TRUE: "true">
    | <FALSE: "false">
    | <LOOP: "loop">
    | <WHILE: "while">

    | <TEXT : ( "\"" ( "\\" ~[] | ~["\"", "\\", "\n", "\r"] )* "\"" ) | ( "\'" ( "\\" ~[] | ~["\'", "\\", "\n", "\r"] )* "\'" )>
    | <REAL: ( ["0"-"9"] ) ( ["0"-"9"] )? ( ["0"-"9"] )? ( ["0"-"9"] )? "." (( ["0"-"9"] ) | ( ["0"-"9"] ) ( ["0"-"9"] ) )>
    | <NUM: ( ["0"-"9"] ) ( ["0"-"9"] )? ( ["0"-"9"] )?>

    | <EQUAL: "==">
    | <NOT_EQUAL: "!=">
    | <SEMICOLON: ";">
    | <ASSIGN: "=">
    | <COLON: ":">
    | <COMMA: ",">
    | <DOT: ".">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <LBRACKET: "[">
    | <RBRACKET: "]">
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <PLUS: "+">
    | <MINUS: "-">
    | <SHIFT_RIGHT_ASSIGN: ">>=">
    | <STAR: "*">
    | <SLASH: "/">
    | <PERCENT: "%">
    | <POWER: "**">
    | <DOUBLE_PERCENT: "%%">
    | <SHIFT_LEFT: "<<">
    | <SHIFT_RIGHT: ">>">
    | <SHIFT_LEFT_ASSIGN: "<<=">
    | <EXCLAMATION: "!">
    | <PIPE: "|">
    | <AMPERSAND: "&">

    | <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] ( ( ["0"-"9"] )? ["a"-"z", "A"-"Z", "_"] )* >

    | <ERROR_NUMBER_TOO_MANY_DIGITS: ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+>
    | <ERROR_IDENTIFIER_START_WITH_NUM: ["0"-"9"]( ["a"-"z", "A"-"Z", "0"-"9", "_"] )* >
    | <ERROR_IDENTIFIER_WITH_MANY_NUMS: ( ["a"-"z", "A"-"Z", "0"-"9", "_"] )*  ( ["0"-"9"] )+ (["a"-"z", "A"-"Z", "_"] )+ >
    | <ERROR_IDENTIFIER_ENDS_WITH_NUM: ( ["a"-"z", "A"-"Z", "0"-"9", "_"] )* ( ["0"-"9"] ) >
    | <ERROR_UNTERMINATED_STRING: (( "\"" ( "\\" ~[] | ~["\"", "\\", "\n", "\r"] )* ) | ( "\'" ( "\\" ~[] | ~["\'", "\\", "\n", "\r"] )* )) >
    | <ERROR_UNTERMINATED_COMMENT: "/*" (~["*"] | "*" ~["/"])* >

    | <ERROR_REAL_TOO_MANY_DIGITS1:( ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+ "." ( ["0"-"9"] ) ( ["0"-"9"] )?)>
    | <ERROR_REAL_TOO_MANY_DIGITS2:( ["0"-"9"] ) ( ["0"-"9"] )? ( ["0"-"9"] )? ( ["0"-"9"] )? "."  ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+>
    | <ERROR_REAL_TOO_MANY_DIGITS3:( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+ "." ( ["0"-"9"] ) ( ["0"-"9"] ) ( ["0"-"9"] )+ >
    | <ERROR_INVALID_REAL:( ( ["0"-"9"] ( ["a"-"z", "A"-"Z", "_"] )* )+ "." ( ["a"-"z", "A"-"Z", "0"-"9", "_", "."] )*)>

    | <ERROR_INVALID_SYMBOL: ~[]>
}

void program():{}
{
        try{
            <BEGIN> [ <IDENTIFIER> ]
            <START>
            <END> <DOT>
        }
        catch(ParseException e){
            String tokensEsperados = criaListaEsperados(e.expectedTokenSequences);
            System.out.println("program: " + tokensEsperados);
            System.out.println("=======================");
            errosSintaticos.append("Linha ").append(e.currentToken.next.beginLine).append(", coluna ").append(e.currentToken.next.beginColumn).append("\n");

        }
}

